// <auto-generated />
using System;
using MagicCardsmith.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MagicCardsmith.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MagicCardsmith.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AvatarId")
                        .HasColumnType("int")
                        .HasComment("Avatar Identifier.Picked after signing in");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Avatar remote URL.Picked after signing in");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GameRulesId")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Game Rules published by Admin");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nickname")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Art", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User id");

                    b.Property<bool>("ApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Is art approved by admin");

                    b.Property<int?>("ArtIstId")
                        .HasColumnType("int")
                        .HasComment("Is this art added by MagciCardsmith team.");

                    b.Property<int?>("CardId")
                        .HasColumnType("int")
                        .HasComment("Any cards using this art.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Art Description");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Art image extension");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEventArt")
                        .HasColumnType("bit")
                        .HasComment("Is art added from an event");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemoteImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Art URL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Art Title");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArtIstId");

                    b.HasIndex("CardId")
                        .IsUnique()
                        .HasFilter("[CardId] IS NOT NULL");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Arts");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Is Article approved by Admin.");

                    b.Property<string>("ArticleCreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Article creator identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Article description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Article image URL");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Article short description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Article title");

                    b.HasKey("Id");

                    b.HasIndex("ArticleCreatorId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Is user artist applicaiton approved by the admin.");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Avatar remote URL.Picked after signing in");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Information about the artist");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Artist's eamil");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Artist's user id");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Avatar Remote URL. Seeded.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Avatar Name. Seeded.");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.BlackMana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Mana Conor Name");

                    b.Property<int>("Cost")
                        .HasColumnType("int")
                        .HasComment("Play Card Total Cost");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Remote URL. Seeded.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("BlackManas");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.BlueMana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Mana Conor Name");

                    b.Property<int>("Cost")
                        .HasColumnType("int")
                        .HasComment("Play Card Total Cost");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Remote URL. Seeded.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("BlueManas");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AbilitiesAndFlavor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Card use requirements and effects. Card power description.");

                    b.Property<bool>("ApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Has this card been approved by admin.");

                    b.Property<string>("ArtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BlackManaId")
                        .HasColumnType("int")
                        .HasComment("Mana cost Id");

                    b.Property<int?>("BlueManaId")
                        .HasColumnType("int")
                        .HasComment("Mana cost Id");

                    b.Property<int?>("CardFrameColorId")
                        .HasColumnType("int")
                        .HasComment("Framecolor Id. There is a default value.");

                    b.Property<string>("CardRemoteUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image of the card saved locally upon creation.");

                    b.Property<string>("CardSmithId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CardTypeId")
                        .HasColumnType("int")
                        .HasComment("Card type identifier.");

                    b.Property<int?>("ColorlessManaId")
                        .HasColumnType("int")
                        .HasComment("Mana cost Id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("GameExpansionId")
                        .HasColumnType("int")
                        .HasComment("This card is part of which expansion.");

                    b.Property<int?>("GreenManaId")
                        .HasColumnType("int")
                        .HasComment("Mana cost Id");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit")
                        .HasComment("Has this card been created during an event.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEventCard")
                        .HasColumnType("bit")
                        .HasComment("Has this card been created during an event.");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Playcard name");

                    b.Property<string>("Power")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Card will deal damage equal to power.");

                    b.Property<int?>("RedManaId")
                        .HasColumnType("int")
                        .HasComment("Mana cost Id");

                    b.Property<string>("Toughness")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Card can take damage up to amount equal to its toughness.");

                    b.Property<int?>("WhiteManaId")
                        .HasColumnType("int")
                        .HasComment("Mana cost Id");

                    b.HasKey("Id");

                    b.HasIndex("BlackManaId");

                    b.HasIndex("BlueManaId");

                    b.HasIndex("CardFrameColorId");

                    b.HasIndex("CardSmithId");

                    b.HasIndex("CardTypeId");

                    b.HasIndex("ColorlessManaId");

                    b.HasIndex("EventId");

                    b.HasIndex("GameExpansionId");

                    b.HasIndex("GreenManaId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RedManaId");

                    b.HasIndex("WhiteManaId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.CardFrameColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Remote Image. Seeded");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Frame color. Seeded");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("CardFrameColors");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.CardMana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mana color type.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemoteImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mana remote image url.");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("CardsMana");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.CardReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasComment("Review of which card");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Card Description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("CardReview");

                    b.Property<string>("Suggestions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("What can be done to resolve the issue.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Card title");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PostedByUserId");

                    b.ToTable("CardReviews");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.CardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Card type is.");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.ChatUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatUsers");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.ColorlessMana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Mana Conor Name");

                    b.Property<int>("Cost")
                        .HasColumnType("int")
                        .HasComment("Play Card Total Cost");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Remote URL. Seeded.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ColorlessManas");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("ApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Is event approved by admin.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventCreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Event creator");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Event Description");

                    b.Property<int>("EventStatusId")
                        .HasColumnType("int")
                        .HasComment("Event status");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemoteImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Event image url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Event Title");

                    b.HasKey("Id");

                    b.HasIndex("EventCreatorId");

                    b.HasIndex("EventStatusId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.EventMilestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Milestone description");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Milestone instructions");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasComment("Is milestone completed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RequireArtInput")
                        .HasColumnType("bit")
                        .HasComment("Does it require art input");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Milestone title");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("EventMilestones");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.EventStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Event status.Seeded");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("EventStatuses");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.GameExpansion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CardsCount")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Numbwer of cards by expansion. Seeded");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Card game expansion description. Seeded");

                    b.Property<string>("ExpansionSymbolUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Card game expansion symbol. Seeded");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Card game expansion title.Seeded");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("GameExpansions");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.GameRulesComponents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Game rule component desciption. Seeded");

                    b.Property<int>("GameRulesId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Game rule component image url. Seeded");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Game rule component title. Seeded");

                    b.HasKey("Id");

                    b.HasIndex("GameRulesId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("GameRulesComponents");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.GreenMana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Mana Conor Name");

                    b.Property<int>("Cost")
                        .HasColumnType("int")
                        .HasComment("Play Card Total Cost");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Remote URL. Seeded.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("GreenManas");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.MagicCardsmithGameRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AttackingAndBlocking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BattleFieldIntroUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BattleFieldSetUp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeginningPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNameReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNameUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardPowToughUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardPowerToughnessReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardReadingIntroUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardTextBoxReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardTextBoxUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardTypeReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardTypeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CastingSpells")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CombatPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreaturesInBattle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndingPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstMainPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameActions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameRulesIntroUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraveyardInBattle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandInBattle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LandsInBattle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibraryInBattle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManaCostReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManaCostUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Outro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutroUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartsOfTheTurn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublishedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondMainPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetSymbolReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetSymbolUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TappingUntapping")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PublishedById")
                        .IsUnique()
                        .HasFilter("[PublishedById] IS NOT NULL");

                    b.ToTable("GameRules");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.RedMana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Mana Conor Name");

                    b.Property<int>("Cost")
                        .HasColumnType("int")
                        .HasComment("Play Card Total Cost");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Remote URL. Seeded.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("RedManas");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Store location");

                    b.Property<bool>("ApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Store approved by Admin.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Store location");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Store location");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Store image Url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Store name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Store phone");

                    b.Property<string>("StoreOwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StoreOwnerId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasComment("Vote added to.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Vote casted by.");

                    b.Property<byte>("Value")
                        .HasColumnType("tinyint")
                        .HasComment("Vote value");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.WhiteMana", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Mana Conor Name");

                    b.Property<int>("Cost")
                        .HasColumnType("int")
                        .HasComment("Play Card Total Cost");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Remote URL. Seeded.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("WhiteManas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.Avatar", "Avatar")
                        .WithMany("Users")
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Art", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Art")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagicCardsmith.Data.Models.Artist", "Artist")
                        .WithMany("ArtPieces")
                        .HasForeignKey("ArtIstId");

                    b.HasOne("MagicCardsmith.Data.Models.Card", "Card")
                        .WithOne("Art")
                        .HasForeignKey("MagicCardsmith.Data.Models.Art", "CardId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Artist");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Article", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", "ArticleCreator")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleCreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArticleCreator");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Artist", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Card", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.BlackMana", "BlackMana")
                        .WithMany("Cards")
                        .HasForeignKey("BlackManaId");

                    b.HasOne("MagicCardsmith.Data.Models.BlueMana", "BlueMana")
                        .WithMany("Cards")
                        .HasForeignKey("BlueManaId");

                    b.HasOne("MagicCardsmith.Data.Models.CardFrameColor", "CardFrameColor")
                        .WithMany("Cards")
                        .HasForeignKey("CardFrameColorId");

                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", "CardSmith")
                        .WithMany("Cards")
                        .HasForeignKey("CardSmithId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagicCardsmith.Data.Models.CardType", "CardType")
                        .WithMany("Cards")
                        .HasForeignKey("CardTypeId");

                    b.HasOne("MagicCardsmith.Data.Models.ColorlessMana", "ColorlessMana")
                        .WithMany("Cards")
                        .HasForeignKey("ColorlessManaId");

                    b.HasOne("MagicCardsmith.Data.Models.Event", "Event")
                        .WithMany("Cards")
                        .HasForeignKey("EventId");

                    b.HasOne("MagicCardsmith.Data.Models.GameExpansion", "GameExpansion")
                        .WithMany("Cards")
                        .HasForeignKey("GameExpansionId");

                    b.HasOne("MagicCardsmith.Data.Models.GreenMana", "GreenMana")
                        .WithMany("Cards")
                        .HasForeignKey("GreenManaId");

                    b.HasOne("MagicCardsmith.Data.Models.RedMana", "RedMana")
                        .WithMany("Cards")
                        .HasForeignKey("RedManaId");

                    b.HasOne("MagicCardsmith.Data.Models.WhiteMana", "WhiteMana")
                        .WithMany("Cards")
                        .HasForeignKey("WhiteManaId");

                    b.Navigation("BlackMana");

                    b.Navigation("BlueMana");

                    b.Navigation("CardFrameColor");

                    b.Navigation("CardSmith");

                    b.Navigation("CardType");

                    b.Navigation("ColorlessMana");

                    b.Navigation("Event");

                    b.Navigation("GameExpansion");

                    b.Navigation("GreenMana");

                    b.Navigation("RedMana");

                    b.Navigation("WhiteMana");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.CardMana", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.Card", "Card")
                        .WithMany("CardMana")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.CardReview", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.Card", "Card")
                        .WithMany("CardReviews")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", "PostedByUser")
                        .WithMany("Reviews")
                        .HasForeignKey("PostedByUserId");

                    b.Navigation("Card");

                    b.Navigation("PostedByUser");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.ChatUser", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.Chat", "Chat")
                        .WithMany("Users")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Event", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", "EventCreator")
                        .WithMany("Events")
                        .HasForeignKey("EventCreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagicCardsmith.Data.Models.EventStatus", "Status")
                        .WithMany()
                        .HasForeignKey("EventStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventCreator");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.EventMilestone", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.Event", "Event")
                        .WithMany("EventMilestones")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.GameRulesComponents", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.MagicCardsmithGameRules", "GameRules")
                        .WithMany("GameRules")
                        .HasForeignKey("GameRulesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameRules");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.MagicCardsmithGameRules", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", "PublishedBy")
                        .WithOne("GameRules")
                        .HasForeignKey("MagicCardsmith.Data.Models.MagicCardsmithGameRules", "PublishedById");

                    b.Navigation("PublishedBy");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Message", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Store", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", "StoreOwner")
                        .WithMany("Stores")
                        .HasForeignKey("StoreOwnerId");

                    b.Navigation("StoreOwner");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Vote", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.Card", "Card")
                        .WithMany("Votes")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId");

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MagicCardsmith.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Art");

                    b.Navigation("Articles");

                    b.Navigation("Cards");

                    b.Navigation("Chats");

                    b.Navigation("Claims");

                    b.Navigation("Events");

                    b.Navigation("GameRules");

                    b.Navigation("Logins");

                    b.Navigation("Reviews");

                    b.Navigation("Roles");

                    b.Navigation("Stores");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Artist", b =>
                {
                    b.Navigation("ArtPieces");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Avatar", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.BlackMana", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.BlueMana", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Card", b =>
                {
                    b.Navigation("Art")
                        .IsRequired();

                    b.Navigation("CardMana");

                    b.Navigation("CardReviews");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.CardFrameColor", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.CardType", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.ColorlessMana", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.Event", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("EventMilestones");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.GameExpansion", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.GreenMana", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.MagicCardsmithGameRules", b =>
                {
                    b.Navigation("GameRules");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.RedMana", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MagicCardsmith.Data.Models.WhiteMana", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
